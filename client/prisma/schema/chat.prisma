model Chat {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String?
  image              String?              @default("")
  admins             ChatAdmin[] // Updated to allow multiple admins
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  members            ChatMember[]
  messages           Message[]
  isGroup            Boolean              @default(true)
  NotificationStatus NotificationStatus[] // List of notification statuses for each member
  blockedUsers       BlockedUser[] // List of blocked users for this chat
  messageStatus      MessageStatus[] // Message status for each user in chat
  User               User?                @relation(fields: [userId], references: [id])
  userId             String?              @db.ObjectId
}

model ChatAdmin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId]) // Ensure a user can only be admin of a chat once
}

model ChatMember {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  userId             String              @db.ObjectId
  chatId             String              @db.ObjectId
  joinedAt           DateTime            @default(now())
  archivedAt         DateTime? // Timestamp when the chat was archived
  pinnedAt           DateTime? // Timestamp when the chat was pinned
  favoriteAt         DateTime? // Timestamp when the chat was favorited
  lastSeenAt         DateTime? // Timestamp when the user last saw the chat
  deletedAt          DateTime? // Timestamp when the chat was deleted
  deletedBy          String?             @db.ObjectId // UserId of who deleted the chat
  updatedAt          DateTime?           @updatedAt
  notificationStatus NotificationStatus? @relation(fields: [userId, chatId], references: [userId, chatId], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat               Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId]) // Ensures a user can't join the same chat twice
  @@index([chatId])
  @@index([userId])
  @@index([updatedAt])
}

model NotificationStatus {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  userId     String            @db.ObjectId
  chatId     String            @db.ObjectId
  status     NotificationState @default(UNMUTED)
  mutedUntil DateTime?
  updatedAt  DateTime          @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat       Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  ChatMember ChatMember?

  @@unique([userId, chatId])
}

model BlockedUser {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  chatId       String    @db.ObjectId
  blockedAt    DateTime  @default(now())
  blockedUntil DateTime?
  blockedBy    String    @db.ObjectId

  chat          Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user          User @relation("UserBlock", fields: [userId], references: [id])
  blockedByUser User @relation("BlockedByUser", fields: [blockedBy], references: [id])

  @@unique([userId, chatId])
}
