model Chat {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String?
  image              String?              @default("")
  adminId            String               @db.ObjectId
  admin              User                 @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  members            ChatMember[]
  messages           Message[]
  isGroup            Boolean              @default(true) // Indicates if it's a group chat
  NotificationStatus NotificationStatus[] // List of notification statuses for each member
  blockedUsers       BlockedUser[] // List of blocked users for this chat
  messageStatus      MessageStatus[] // Message status for each user in chat
}

model ChatMember {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  chatId     String    @db.ObjectId
  joinedAt   DateTime  @default(now())
  archivedAt DateTime? // Timestamp when the chat was archived
  pinnedAt   DateTime? // Timestamp when the chat was pinned
  deletedAt  DateTime? // Timestamp when the chat was deleted
  deletedBy  String?  @db.ObjectId// UserId of who deleted the chat

  notificationStatus NotificationStatus? @relation(fields: [userId, chatId], references: [userId, chatId], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat               Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId]) // Ensures a user can't join the same chat twice
}

model NotificationStatus {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  userId     String            @db.ObjectId
  chatId     String            @db.ObjectId
  status     NotificationState @default(UNMUTED) // Default is not muted
  mutedUntil DateTime? // Optional date to unmute automatically
  updatedAt  DateTime          @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat       Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  ChatMember ChatMember?

  @@unique([userId, chatId])
}

// Enum to represent notification status
enum NotificationState {
  UNMUTED // Notifications are on
  MUTED // Notifications are off
  BLOCKED // Blocked from interacting with the chat
}

model BlockedUser {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  chatId       String    @db.ObjectId
  blockedAt    DateTime  @default(now())
  blockedUntil DateTime? // Optional date to unblock automatically
  blockedBy    String    @db.ObjectId

  chat          Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user          User @relation("UserBlock", fields: [userId], references: [id])
  blockedByUser User @relation("BlockedByUser", fields: [blockedBy], references: [id])

  @@unique([userId, chatId]) // Ensure that a user can only be blocked once per chat
}

enum BlockAction {
  BLOCKED
  UNBLOCKED
}
