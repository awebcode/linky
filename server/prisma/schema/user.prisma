model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String?
  image         String    @default("")
  role          Role      @default(USER)
  status        Status    @default(OFFLINE)
  lastActive    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  emailVerified DateTime?

  verified           Boolean              @default(false)
  resetToken         DateTime?            @unique @default(now())
  resetTokenExpiry   DateTime?
  providerId         String?              @default("credential")
  accounts           Account[]
  sessions           Session[]
  // Optional for WebAuthn support
  Authenticator      Authenticator[]
  memberships        ChatMember[]
  messages           Message[]
  chatsAdministered  Chat[]
  seenMessages       MessageSeen[]
  reactions          Reaction[]
  NotificationStatus NotificationStatus[]
  blockedUsers       BlockedUser[]        @relation("UserBlock") // Users blocked in chats
  blockedByUsers     BlockedUser[]        @relation("BlockedByUser") // Chats where this user has blocked someone
  ChatAdmin          ChatAdmin[]

  @@map("users")
  @@index([status])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
