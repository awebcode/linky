model Message {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  tempId      String?        
  content     String
  senderId    String        @db.ObjectId
  chatId      String        @db.ObjectId
  sentAt      DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  status      MessageStatus @default(SENT)
  sender      User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat        Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  media       Media[] // Optional: Multiple media files per message
  reactions   Reaction[] // Reactions for the message
  MessageSeen MessageSeen[]
}

model Media {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  messageId String  @db.ObjectId
  type      String? // e.g., 'image', 'video', 'audio', 'document'
  size      Int? // File size in bytes
  url       String // URL of the uploaded media
  caption   String? // Optional caption for the media
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Reaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  emoji     String // e.g., "üëç", "‚ù§Ô∏è", "üòÇ"
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId]) // Ensures each user can react to a message only once
}

model MessageSeen {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  seenAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId]) // Ensures a user can't mark the same message as seen more than once
}
